 My Project Idea:

I want to develop a project for my final Computer Networking Lab. The initial concept is inspired by a typical FTP server, which supports functionalities like uploading and downloading files. My idea is somewhat similar, but with a unique twist.

I plan to include a special feature: whenever a user uploads or downloads a file, we will track detailed network information such as:

RTT (Round Trip Time)

Timeout occurrences

Packet loss events

Congestion window (cwnd)

Receiver window (rwnd)

Other TCP congestion control variables

Using these variables, we will generate dynamic visualizations such as:

Transmission Round vs. Congestion Window (cwnd)

TCP Tahoe and TCP Reno behavior

Possibly even deep-level packet flow visualization from host to host

These graphs will update automatically after each file transfer completes.

âœ… Key Features of the FTP System:
User Registration & Login System

User Interface (UI) with the following sections:

Server View: Displays all files available on the server.

Client Upload Section: Allows users to upload files from their local device.

Graph Visualization Button: Opens a separate page with real-time network graphs based on the current transfer session.

Transfer History Section: Displays the last 5â€“10 file transfer logs (with metrics like upload/download time, file size, etc.)

Network Awareness: All transfers comply with TCP features like flow control, congestion control, and retransmissions.

ðŸ’¡ Additional Suggestions:
Real-time notifications on packet loss or retransmissions.

Dark/light theme toggle for aesthetic UI.

Admin dashboard to monitor all users and traffic.

A download speed vs time graph or heatmap showing active users.

ðŸ›  Full Implementation Guide
ðŸ”§ Tech Stack
Layer	Technology Suggestion	Why
Frontend	React (with Vite + TailwindCSS + shadcn/ui)	Lightweight, fast UI development
Backend	Java (Spring Boot or plain socket programming if low-level control is required)	You already have Java code
Real-time Graph Plotting	Python with Matplotlib/Plotly + WebSocket + Flask/Express as bridge	For real-time plotting of cwnd, RTT, etc.
Database	MongoDB (or PostgreSQL if using SQL)	To store user info, transfer history, logs
File Storage	Server filesystem (locally), or GridFS (MongoDB)	Depending on file size and access pattern
Authentication	JWT (JSON Web Token) or Firebase Auth	Simple secure login


ftp-network-visualizer/
â”œâ”€â”€ client/                   # Frontend React application
â”‚   â”œâ”€â”€ public/               # Static files
â”‚   â”œâ”€â”€ src/
â”‚   â”‚   â”œâ”€â”€ assets/           # Images, fonts, etc.
â”‚   â”‚   â”œâ”€â”€ components/       # Reusable UI components
â”‚   â”‚   â”‚   â”œâ”€â”€ auth/         # Login/registration components
â”‚   â”‚   â”‚   â”œâ”€â”€ dashboard/    # Main interface components
â”‚   â”‚   â”‚   â”œâ”€â”€ file-list/    # Server/client file browsers
â”‚   â”‚   â”‚   â”œâ”€â”€ graphs/       # Visualization components
â”‚   â”‚   â”‚   â””â”€â”€ transfer/     # Transfer status components
â”‚   â”‚   â”œâ”€â”€ pages/            # Main application pages
â”‚   â”‚   â”‚   â”œâ”€â”€ Dashboard.js  # Main interface
â”‚   â”‚   â”‚   â”œâ”€â”€ Graphs.js     # Visualization page
â”‚   â”‚   â”‚   â””â”€â”€ History.js    # Transfer history
â”‚   â”‚   â”œâ”€â”€ services/         # API service calls
â”‚   â”‚   â”œâ”€â”€ store/            # State management (Redux)
â”‚   â”‚   â”œâ”€â”€ styles/           # Global styles
â”‚   â”‚   â”œâ”€â”€ utils/            # Utility functions
â”‚   â”‚   â”œâ”€â”€ App.js            # Main App component
â”‚   â”‚   â””â”€â”€ index.js          # Entry point
â”‚   â””â”€â”€ package.json
â”‚
â”œâ”€â”€ server/                   # Backend Node.js application
â”‚   â”œâ”€â”€ config/               # Configuration files
â”‚   â”œâ”€â”€ controllers/          # Route controllers
â”‚   â”‚   â”œâ”€â”€ auth.controller.js
â”‚   â”‚   â”œâ”€â”€ file.controller.js
â”‚   â”‚   â”œâ”€â”€ graph.controller.js
â”‚   â”‚   â””â”€â”€ transfer.controller.js
â”‚   â”œâ”€â”€ middlewares/          # Custom middleware
â”‚   â”œâ”€â”€ models/               # Database models
â”‚   â”œâ”€â”€ routes/               # API routes
â”‚   â”œâ”€â”€ services/             # Business logic
â”‚   â”‚   â”œâ”€â”€ network-monitor/  # TCP analysis
â”‚   â”‚   â”œâ”€â”€ storage/          # File handling
â”‚   â”‚   â””â”€â”€ visualization/    # Graph data processing
â”‚   â”œâ”€â”€ utils/                # Utility functions
â”‚   â”œâ”€â”€ app.js                # Express app setup
â”‚   â””â”€â”€ server.js             # Server entry point
â”‚
â”œâ”€â”€ scripts/                  # Utility scripts
â”‚   â”œâ”€â”€ database/             # DB migration/seeding
â”‚   â””â”€â”€ network/              # Network test scripts
â”‚
â”œâ”€â”€ docs/                     # Documentation
â”œâ”€â”€ .env                      # Environment variables
â””â”€â”€ package.json              # Root project config

Phase 1: Basic FTP Functionality
Setup Project Structure

Initialize both frontend and backend projects

Configure basic routing

User Authentication

Implement registration/login system

Set up JWT for session management

File Transfer Core

Create file listing endpoints

Implement basic upload/download functionality

Set up file storage system

Phase 2: Network Monitoring
Packet Capture Integration

Implement TCP packet interception

Extract key metrics (RTT, window sizes, etc.)

Data Storage

Design time-series database schema

Implement real-time metric storage

Transfer History

Create database tables for transfer records

Implement history retrieval endpoints

Phase 3: Visualization
Graph Components

Design visualization layouts

Implement dynamic chart rendering

Real-time Updates

Set up WebSocket connections

Implement live data streaming to frontend

TCP Algorithm Visualization

Create animations for Tahoe/Reno behaviors

Implement congestion window visualizations

Phase 4: Advanced Features
Comparative Analysis

Allow side-by-side comparison of transfers

Implement "replay" functionality for past transfers

Network Simulation

Add controls to simulate network conditions

Implement packet loss/delay injection

Export Functionality

Allow exporting graph data as CSV/PNG

Generate transfer reports


